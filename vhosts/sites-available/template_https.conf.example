server {
    listen 80;
    listen [::]:80;

    # redirect to SSL
    server_name dominio1.com www.dominio1.com;
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # Listen to HTTPS on 443 and allow HTTP/2
    listen 443 ssl http2 default;

    server_name dominio1.com, www.dominio1.com;

    # Document Root
    root /var/www/html/dominio1.com; # Path used in docker-compose.yml
    index index.php;

    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/certbot;
    }

    # Letsencrypt SSL
    ssl_certificate /etc/letsencrypt/live/dominio1.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dominio1.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/dominio1.com/chain.pem;

    # Diffie-Hellman parameter for DHE ciphersuites, to install :
    # $ openssl dhparam -out ssl-dhparams.pem 4096
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Improve HTTPS performance with session resumption
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Enable server-side protection against BEAST attacks
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Enable OCSP stapling (http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox)
    # uses Google DNS servers
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload;";
    add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none'; script-src 'self'; img-src 'self'; style-src 'self'; base-uri 'self'; form-action 'self';";
    add_header Referrer-Policy "no-referrer, strict-origin-when-cross-origin";
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Logging in a container
    access_log /dev/stdout;
    error_log stderr error;
    error_log /dev/stdout info;

    # Character Set
    charset utf-8;

    # TODO: Compression, interpreters, websocket proxies, logging, XSS headers, ...

    # Location
    location / {
        try_files $uri $uri/ /index.php;
    }

    # Error Pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    # Pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #

    location ~ \.php$ {
        try_files $uri /index.php =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #fixes timeouts
        fastcgi_read_timeout 600;
        include fastcgi_params;
    }


    # Deny access to . files, for security
    #
    location ~ /\. {
        log_not_found off;
        deny all;
    }

    # Block access to .htaccess
    location ~ \.htaccess {
        deny all;
    }
}